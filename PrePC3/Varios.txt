/*
class Result {
    private final int start;
    private final int end;
    private final double[][] lower;
    private final double[][] upper;

    public Result(int start, int end, double[][] lower, double[][] upper) {
        this.start = start;
        this.end = end;
        this.lower = lower;
        this.upper = upper;
    }

    public int getStart() {
        return start;
    }

    public int getEnd() {
        return end;
    }

    public double[][] getLower() {
        return lower;
    }

    public double[][] getUpper() {
        return upper;
    }

    @Override
    public String toString() {
        return "\nProceso asociado a " + start + "-" + end + ": " + Arrays.deepToString(lower) + ", " + Arrays.deepToString(upper);
    }
}

class Operation {
    private final BlockingQueue<int[][]> IN;
    private final BlockingQueue<Result> OUT;

    public Operation(BlockingQueue<int[][]> REQUEST, BlockingQueue<Result> RESPONSE) {
        this.IN = REQUEST;
        this.OUT = RESPONSE;
    }

    public Pair luDecomposition(int[][] matrix, int start, int end) {
        int n = matrix.length;
        double[][] lower = new double[n][n];
        double[][] upper = new double[n][n];

        for (int i = start; i < end; i++) {
            for (int k = i; k < n; k++) {
                double sum = 0;
                for (int j = 0; j < i; j++)
                    sum += (lower[i][j] * upper[j][k]);
                upper[i][k] = matrix[i][k] - sum;
            }

            for (int k = i; k < n; k++) {
                if (i == k)
                    lower[i][i] = 1;
                else {
                    double sum = 0;
                    for (int j = 0; j < i; j++)
                        sum += (lower[k][j] * upper[j][i]);
                    lower[k][i] = (matrix[k][i] - sum) / upper[i][i];
                }
            }
        }

        return new Pair(lower, upper);
    }

    public void start() {
        new Thread(() -> {
            while (true) {
                try {
                    int[][] matrix = IN.take();
                    int start = 0; // Replace with actual start index
                    int end = matrix.length; // Replace with actual end index
                    Pair result = luDecomposition(matrix, start, end);
                    OUT.put(new Result(start, end, result.getLower(), result.getUpper()));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }
}
 */

 /*
  public static Pair ParallelLuDecomposition(int[][] matrix) {
        int n = matrix.length;
        double[][] lower = new double[n][n];
        double[][] upper = new double[n][n];
        int numThreads = Runtime.getRuntime().availableProcessors();
        int tasksPerThread = n / numThreads;
    
        Thread[] threads = new Thread[numThreads];
    
        for (int t = 0; t < numThreads; t++) {
            final int from = t * tasksPerThread;
            final int to = (t == numThreads - 1) ? n : from + tasksPerThread;
    
            threads[t] = new Thread(() -> {
                for (int i = from; i < to; i++) {
                    for (int k = i; k < n; k++) {
                        double sum = 0;
                        for (int j = 0; j < i; j++)
                            sum += (lower[i][j] * upper[j][k]);
                        upper[i][k] = matrix[i][k] - sum;
                    }
    
                    for (int k = i; k < n; k++) {
                        if (i == k)
                            lower[i][i] = 1;
                        else {
                            double sum = 0;
                            for (int j = 0; j < i; j++)
                                sum += (lower[k][j] * upper[j][i]);
                            lower[k][i] = (matrix[k][i] - sum) / upper[i][i];
                        }
                    }
                }
            });
    
            threads[t].start();
        }
    
        for (Thread thread : threads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    
        return new Pair(lower, upper);
    }
  */
